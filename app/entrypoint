#!/usr/bin/env python

"""
Entrypoint for the kiwitcms/gitops application!
This is meant to be executed as a command line application triggered
via a pull request comment!
"""
#
# Copyright (c) 2024 Alexander Todorov <atodorov@otb.bg>
#
# Licensed under the AGPL-3.0: https://www.gnu.org/licenses/agpl-3.0.html
#
import os
import sys

root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.append(root_path)

import click
import sentry_sdk

from app.analytics import analyze
from app import events
from app.utils import strtobool
from app.version import __version__


__trigger__ = None


@analyze("main")
def main():
    global __trigger__

    __trigger__ = events.load()

    if strtobool(os.environ.get("INPUT_DEBUG", "false")):
        import pprint

        click.echo("==== ENVIRONMENT ====")
        click.echo(pprint.pformat(dict(os.environ)))

        click.echo("===== TRIGGER EVENT ====")
        click.echo(pprint.pformat(__trigger__.payload))
        click.echo("===================")

    # /use/bin/gh repo clone __trigger__["repository"]["clone_url"] .
    # __trigger__.pr.number
    # /usr/bin/gh pr checkout https://github.com/kiwitcms/gitops/pull/16

    if not __trigger__.args[0].startswith("@kiwitcms"):
        return

    cli(__trigger__.args[1:], prog_name="kiwitcms/gitops")


@click.group(
    invoke_without_command=True,
    context_settings={"ignore_unknown_options": True, "allow_extra_args": True},
)
@click.pass_context
def cli(ctx):
    ctx.obj = ctx.with_resource(__trigger__)


@cli.command()
@click.pass_context
@analyze("help")
def help(ctx):
    output = cli.get_help(ctx)

    click.echo(output)
    ctx.obj.quote_reply(output)


if __name__ == "__main__":
    sentry_sdk.init(
        dsn="https://e9a370eba7bd41fe8faead29552f12d7@o126041.ingest.sentry.io/277775",
        enable_tracing=False,
        release=__version__,
    )
    main()
